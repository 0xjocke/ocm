{
  "name": "postcss",
  "version": "0.1.0",
  "description": "Framework for CSS postprocessors",
  "keywords": [
    "css",
    "parser",
    "postproccessor"
  ],
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/ai/postcss.git"
  },
  "dependencies": {},
  "devDependencies": {
    "coffee-script": "1.6.3",
    "fs-extra": "0.8.1",
    "should": "2.0.2",
    "mocha": "1.14.0"
  },
  "main": "lib/postcss",
  "scripts": {
    "test": "mocha"
  },
  "readme": "# PostCSS\n\nPostCSS is a framework for CSS postprocessors. You get a custom JS function\nto modify CSS, and PostCSS parses CSS, gives you usable JS API to edit CSS node\ntree and then save modified node tree to new CSS.\n\nFor example, let's fix forgotten `content` propery in `::before` and `::after`:\n\n```js\nvar postcss = require('postcss');\n\nvar postprocessor = postcss(function (css) {\n    css.eachRule(function (rule) {\n        if ( rule.selector.match(/::(before|after)/) ) {\n\n            var good = rule.some(function (i) {\n                return i.prop == 'content';\n            });\n            if ( !good ) {\n                rule.prepend({ prop: 'content', value: '\"\"' });\n            }\n\n        }\n    });\n});\n```\n\nAnd then CSS with forgotten `content`:\n\n```css\na::before {\n    width: 10px;\n    height: 10px;\n    background: black\n}\n```\n\nwill be fixed by our new `postprocessor`:\n\n```js\nvar fixed = postprocessor.process(css);\n```\n\nto:\n\n```css\na::before {\n    content: \"\";\n    width: 10px;\n    height: 10px;\n    background: black\n}\n```\n\nSponsored by [Evil Martians](http://evilmartians.com/).\n\n## Features\n\n### Preserves code formatting and indentations\n\nPostCSS saves all spaces if you donâ€™t change CSS node and try to copy your\ncoding style if you modify it.\n\n### Parses everything\n\nIn addition to the unit tests, PostCSS has integration tests to check\nCSS parser on real-world sites. Right now parser is tested on GitHub, Twitter,\nBootstrap and Habrahabr styles.\n\nAlso PostCSS parser is very flexible and, for example, can parse any custom\nor future at-rules, instead of built-in list.\n\n### High-level API\n\nPostCSS is not only parser and stringifier. It contains useful tools, which\ncan be used in most of postprocessor:\n\n1. Safe iterator, which allow to change list inside iteration.\n2. Module to split value list by spaces or commas.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ai/postcss/issues"
  },
  "homepage": "https://github.com/ai/postcss",
  "_id": "postcss@0.1.0",
  "_from": "postcss@~0.1.0"
}
